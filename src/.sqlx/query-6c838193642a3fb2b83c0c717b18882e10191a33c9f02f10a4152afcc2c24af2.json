{
  "db_name": "PostgreSQL",
  "query": "\nSELECT\n    COALESCE(\n        (\n            SELECT\n                JSONB_AGG(\n                    t.cumulative_sums\n                    ORDER BY\n                        t.cumulative_sums ->> 'month',\n                        t.cumulative_sums ->> 'species_fiskeridir_id' ASC\n                )\n            FROM\n                (\n                    SELECT\n                        JSONB_BUILD_OBJECT(\n                            'month',\n                            r.month::INT,\n                            'species_fiskeridir_id',\n                            r.species_fiskeridir_id,\n                            'weight',\n                            r.weight,\n                            'cumulative_weight',\n                            SUM(r.weight) OVER (\n                                PARTITION BY\n                                    r.species_fiskeridir_id\n                                ORDER BY\n                                    r.species_fiskeridir_id,\n                                    r.month ASC ROWS BETWEEN UNBOUNDED PRECEDING\n                                    AND CURRENT ROW\n                            )\n                        ) AS cumulative_sums\n                    FROM\n                        (\n                            SELECT\n                                DATE_PART('month', landing_timestamp) AS \"month\",\n                                SUM(living_weight) AS weight,\n                                le.species_fiskeridir_id\n                            FROM\n                                active_vessels f\n                                INNER JOIN landings l ON l.fiskeridir_vessel_id = f.fiskeridir_vessel_id\n                                INNER JOIN landing_entries le ON le.landing_id = l.landing_id\n                            WHERE\n                                call_sign = $1\n                                AND DATE_PART('year', landing_timestamp)::INT = $3\n                            GROUP BY\n                                DATE_PART('month', landing_timestamp),\n                                le.species_fiskeridir_id\n                        ) r\n                ) t\n        ),\n        '[]'\n    )::TEXT AS \"cumulative_landings!\",\n    JSONB_BUILD_OBJECT(\n        'average',\n        COALESCE(\n            AVG(\n                EXTRACT(\n                    epoch\n                    FROM\n                        q.haul_duration\n                ) / 60\n            ) FILTER (\n                WHERE\n                    q.is_self IS TRUE\n            ),\n            0\n        ),\n        'averageFollowers',\n        COALESCE(\n            AVG(\n                EXTRACT(\n                    epoch\n                    FROM\n                        q.haul_duration\n                ) / 60\n            ) FILTER (\n                WHERE\n                    q.is_self IS FALSE\n            ),\n            0\n        ),\n        'recentTrips',\n        COALESCE(\n            JSONB_AGG(\n                q.trip_haul_duration_json\n                ORDER BY\n                    q.trip_haul_duration_json ->> 'tripStart',\n                    q.trip_haul_duration_json ->> 'fiskeridirVesselId'\n            ) FILTER (\n                WHERE\n                    q.trip_haul_duration_json ->> 'value' IS NOT NULL\n            ),\n            '[]'\n        )\n    )::TEXT AS fishing_time,\n    JSONB_BUILD_OBJECT(\n        'average',\n        COALESCE(\n            AVG(q.trip_distance) FILTER (\n                WHERE\n                    q.is_self IS TRUE\n            ),\n            0\n        ),\n        'averageFollowers',\n        COALESCE(\n            AVG(q.trip_distance) FILTER (\n                WHERE\n                    q.is_self IS FALSE\n            ),\n            0\n        ),\n        'recentTrips',\n        COALESCE(\n            JSONB_AGG(\n                q.trip_distance_json\n                ORDER BY\n                    q.trip_distance_json ->> 'tripStart',\n                    q.trip_distance_json ->> 'fiskeridirVesselId'\n            ) FILTER (\n                WHERE\n                    q.trip_distance_json ->> 'value' IS NOT NULL\n            ),\n            '[]'\n        )\n    )::TEXT AS fishing_distance,\n    JSONB_BUILD_OBJECT(\n        'average',\n        COALESCE(\n            AVG(\n                EXTRACT(\n                    epoch\n                    FROM\n                        q.trip_duration\n                ) / 60\n            ) FILTER (\n                WHERE\n                    q.is_self IS TRUE\n            ),\n            0\n        ),\n        'averageFollowers',\n        COALESCE(\n            AVG(\n                EXTRACT(\n                    epoch\n                    FROM\n                        q.trip_duration\n                ) / 60\n            ) FILTER (\n                WHERE\n                    q.is_self IS FALSE\n            ),\n            0\n        ),\n        'recentTrips',\n        COALESCE(\n            JSONB_AGG(\n                q.trip_duration_json\n                ORDER BY\n                    q.trip_duration_json ->> 'tripStart',\n                    q.trip_duration_json ->> 'fiskeridirVesselId'\n            ) FILTER (\n                WHERE\n                    q.trip_duration_json ->> 'value' IS NOT NULL\n            ),\n            '[]'\n        )\n    )::TEXT AS trip_time,\n    JSONB_BUILD_OBJECT(\n        'average',\n        COALESCE(\n            AVG(q.landing_total_living_weight) FILTER (\n                WHERE\n                    q.is_self IS TRUE\n            ),\n            0\n        ),\n        'averageFollowers',\n        COALESCE(\n            AVG(q.landing_total_living_weight) FILTER (\n                WHERE\n                    q.is_self IS FALSE\n            ),\n            0\n        ),\n        'recentTrips',\n        COALESCE(\n            JSONB_AGG(\n                q.trip_landing_weight_json\n                ORDER BY\n                    q.trip_landing_weight_json ->> 'tripStart',\n                    q.trip_landing_weight_json ->> 'fiskeridirVesselId'\n            ) FILTER (\n                WHERE\n                    q.trip_landing_weight_json ->> 'value' IS NOT NULL\n            ),\n            '[]'\n        )\n    )::TEXT AS landings,\n    JSONB_BUILD_OBJECT(\n        'average',\n        COALESCE(\n            AVG(q.haul_total_weight) FILTER (\n                WHERE\n                    q.is_self IS TRUE\n            ),\n            0\n        ),\n        'averageFollowers',\n        COALESCE(\n            AVG(q.haul_total_weight) FILTER (\n                WHERE\n                    q.is_self IS FALSE\n            ),\n            0\n        ),\n        'recentTrips',\n        COALESCE(\n            JSONB_AGG(\n                q.trip_haul_weight_json\n                ORDER BY\n                    q.trip_haul_weight_json ->> 'tripStart',\n                    q.trip_haul_weight_json ->> 'fiskeridirVesselId'\n            ) FILTER (\n                WHERE\n                    q.trip_haul_weight_json ->> 'value' IS NOT NULL\n            ),\n            '[]'\n        )\n    )::TEXT AS ers_dca\nFROM\n    (\n        SELECT\n            MAX(k.fiskeridir_vessel_id) AS fiskeridir_vessel_id,\n            MAX(k.trip_start) AS trip_start,\n            MAX(k.trip_distance) AS trip_distance,\n            MAX(k.landing_total_living_weight) AS landing_total_living_weight,\n            MAX(k.haul_duration) AS haul_duration,\n            MAX(k.trip_duration) AS trip_duration,\n            MAX(k.haul_total_weight) AS haul_total_weight,\n            (ARRAY_AGG(k.is_self)) [1] AS is_self,\n            JSONB_BUILD_OBJECT(\n                'fiskeridirVesselId',\n                MAX(k.fiskeridir_vessel_id),\n                'tripStart',\n                MAX(k.trip_start),\n                'value',\n                MAX(\n                    EXTRACT(\n                        epoch\n                        FROM\n                            k.haul_duration\n                    ) / 60\n                )\n            ) AS trip_haul_duration_json,\n            JSONB_BUILD_OBJECT(\n                'fiskeridirVesselId',\n                MAX(k.fiskeridir_vessel_id),\n                'tripStart',\n                MAX(k.trip_start),\n                'value',\n                MAX(k.trip_distance)\n            ) AS trip_distance_json,\n            JSONB_BUILD_OBJECT(\n                'fiskeridirVesselId',\n                MAX(k.fiskeridir_vessel_id),\n                'tripStart',\n                MAX(k.trip_start),\n                'value',\n                MAX(\n                    EXTRACT(\n                        epoch\n                        FROM\n                            k.trip_duration\n                    ) / 60\n                )\n            ) AS trip_duration_json,\n            JSONB_BUILD_OBJECT(\n                'fiskeridirVesselId',\n                MAX(k.fiskeridir_vessel_id),\n                'tripStart',\n                MAX(k.trip_start),\n                'value',\n                MAX(k.landing_total_living_weight)\n            ) AS trip_landing_weight_json,\n            JSONB_BUILD_OBJECT(\n                'fiskeridirVesselId',\n                MAX(k.fiskeridir_vessel_id),\n                'tripStart',\n                MAX(k.trip_start),\n                'value',\n                MAX(k.haul_total_weight)\n            ) AS trip_haul_weight_json\n        FROM\n            (\n                SELECT\n                    qi.fiskeridir_vessel_id,\n                    qi.is_self,\n                    td.trip_id,\n                    td.distance AS trip_distance,\n                    td.landing_total_living_weight,\n                    td.haul_duration,\n                    td.trip_duration,\n                    td.haul_total_weight,\n                    LOWER(td.period) AS trip_start,\n                    ROW_NUMBER() OVER (\n                        PARTITION BY\n                            td.fiskeridir_vessel_id\n                        ORDER BY\n                            td.period DESC\n                    ) AS r\n                FROM\n                    (\n                        SELECT\n                            fiskeridir_vessel_id,\n                            TRUE AS is_self\n                        FROM\n                            active_vessels f\n                        WHERE\n                            f.call_sign = $1\n                        UNION\n                        SELECT\n                            fiskeridir_vessel_id,\n                            FALSE AS is_self\n                        FROM\n                            user_follows uf\n                        WHERE\n                            uf.barentswatch_user_id = $2\n                    ) qi\n                    INNER JOIN trips_detailed td ON qi.fiskeridir_vessel_id = td.fiskeridir_vessel_id\n            ) k\n        WHERE\n            k.r <= 10\n        GROUP BY\n            k.trip_id\n    ) q\n            ",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "cumulative_landings!",
        "type_info": "Text"
      },
      {
        "ordinal": 1,
        "name": "fishing_time",
        "type_info": "Text"
      },
      {
        "ordinal": 2,
        "name": "fishing_distance",
        "type_info": "Text"
      },
      {
        "ordinal": 3,
        "name": "trip_time",
        "type_info": "Text"
      },
      {
        "ordinal": 4,
        "name": "landings",
        "type_info": "Text"
      },
      {
        "ordinal": 5,
        "name": "ers_dca",
        "type_info": "Text"
      }
    ],
    "parameters": {
      "Left": [
        "Text",
        "Uuid",
        "Int4"
      ]
    },
    "nullable": [
      null,
      null,
      null,
      null,
      null,
      null
    ]
  },
  "hash": "6c838193642a3fb2b83c0c717b18882e10191a33c9f02f10a4152afcc2c24af2"
}
