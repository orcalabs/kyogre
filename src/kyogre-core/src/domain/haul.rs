use chrono::{DateTime, NaiveDate, NaiveTime, Utc};

use crate::{FiskdirVesselNationalityGroup, WhaleGender};

#[derive(Debug, Clone)]
#[remain::sorted]
pub struct Haul {
    pub area_grouping_end_id: Option<String>,
    pub area_grouping_start_id: Option<String>,
    pub call_sign_of_loading_vessel: Option<String>,
    pub catch_year: Option<i32>,
    pub catches: Vec<HaulCatch>,
    pub duration: i32,
    pub economic_zone_id: Option<String>,
    pub ers_activity_id: String,
    pub ers_message_type_id: String,
    pub fiskeridir_vessel_id: Option<i64>,
    pub gear_amount: Option<i32>,
    pub gear_fao_id: Option<String>,
    pub gear_fiskeridir_id: Option<i32>,
    pub gear_group_id: Option<i32>,
    pub gear_main_group_id: Option<i32>,
    pub gear_mesh_width: Option<i32>,
    pub gear_problem_id: Option<i32>,
    pub gear_specification_id: Option<i32>,
    pub haul_distance: Option<i32>,
    pub herring_population_fiskeridir_id: Option<i32>,
    pub herring_population_id: Option<String>,
    pub location_end_code: Option<i32>,
    pub location_start_code: Option<i32>,
    pub main_area_end_id: Option<i32>,
    pub main_area_start_id: Option<i32>,
    pub message_date: NaiveDate,
    pub message_id: i64,
    pub message_number: i32,
    pub message_time: NaiveTime,
    pub message_timestamp: DateTime<Utc>,
    pub message_version: i32,
    pub message_year: i32,
    pub ocean_depth_end: i32,
    pub ocean_depth_start: i32,
    pub port_id: Option<String>,
    pub quota_type_id: i32,
    pub relevant_year: i32,
    pub sequence_number: Option<i32>,
    pub start_date: NaiveDate,
    pub start_latitude: f64,
    pub start_longitude: f64,
    pub start_time: NaiveTime,
    pub start_timestamp: DateTime<Utc>,
    pub stop_date: NaiveDate,
    pub stop_latitude: f64,
    pub stop_longitude: f64,
    pub stop_time: NaiveTime,
    pub stop_timestamp: DateTime<Utc>,
    pub vessel_building_year: Option<i32>,
    pub vessel_call_sign: Option<String>,
    pub vessel_call_sign_ers: String,
    pub vessel_county: Option<String>,
    pub vessel_county_code: Option<i32>,
    pub vessel_engine_building_year: Option<i32>,
    pub vessel_engine_power: Option<i32>,
    pub vessel_greatest_length: Option<f64>,
    pub vessel_gross_tonnage_1969: Option<i32>,
    pub vessel_gross_tonnage_other: Option<i32>,
    pub vessel_identification: String,
    pub vessel_length: f64,
    pub vessel_length_group: Option<String>,
    pub vessel_length_group_code: Option<i32>,
    pub vessel_material_code: Option<String>,
    pub vessel_municipality: Option<String>,
    pub vessel_municipality_code: Option<i32>,
    pub vessel_name: Option<String>,
    pub vessel_name_ers: Option<String>,
    pub vessel_nationality_code: String,
    pub vessel_nationality_group_id: FiskdirVesselNationalityGroup,
    pub vessel_rebuilding_year: Option<i32>,
    pub vessel_registration_id: Option<String>,
    pub vessel_registration_id_ers: Option<String>,
    pub vessel_valid_until: Option<NaiveDate>,
    pub vessel_width: Option<f64>,
    pub whale_catches: Vec<WhaleCatch>,
}

#[derive(Debug, Clone)]
#[remain::sorted]
pub struct HaulCatch {
    pub living_weight: Option<i32>,
    pub main_species_fao_id: Option<String>,
    pub main_species_fiskeridir_id: Option<i32>,
    pub species_fao_id: Option<String>,
    pub species_fiskeridir_id: Option<i32>,
    pub species_group_id: Option<i32>,
    pub species_main_group_id: Option<i32>,
}

#[derive(Debug, Clone)]
#[remain::sorted]
pub struct WhaleCatch {
    pub blubber_measure_a: Option<i32>,
    pub blubber_measure_b: Option<i32>,
    pub blubber_measure_c: Option<i32>,
    pub circumference: Option<i32>,
    pub fetus_length: Option<i32>,
    pub gender_id: Option<WhaleGender>,
    pub grenade_number: Option<String>,
    pub individual_number: Option<i32>,
    pub length: Option<i32>,
}
